#快速排序法
class quick_sort(): 
    def splitpoint(self, nums, start, end): #找出分隔点，即本代码中nums[start]在数组中的实际位置，注意end是可以取到的index值
        key = nums[start]
        leftmark = start + 1
        rightmark = end
        done = False
        while not done:
            while nums[leftmark] <= key and leftmark <= rightmark and leftmark < end:
                leftmark += 1
            while nums[rightmark] >= key and leftmark <= rightmark and rightmark > start:
               rightmark -= 1
            if leftmark >= rightmark:     #此处必须是等号，可以用长度为2的数组验证。
                done = True
            else:
                nums[leftmark], nums[rightmark] = nums[rightmark], nums[leftmark]
        nums[start], nums[rightmark] = nums[rightmark], nums[start]
        return rightmark

    def quicksorthelper(self, nums, start, end): 
        if start < end:
            split = self.splitpoint(nums, start, end)
            self.quicksorthelper(nums, start, split - 1)
            self.quicksorthelper(nums, split + 1, end)

    def quicksort(self, nums): 
        self.quicksorthelper(nums, 0, len(nums) - 1)
        return nums
        
if __name__ == '__main__':
    s = quick_sort()
    print(s.quicksort([1,4,6,2,7,3,6,3]))
    
#插入排序
def insertsort(nums):
    if not nums:
        return nums
    length = len(nums)
    for i in range(1,length):
        key = nums[i]
        while i > 0 and nums[i-1] > key:
            nums[i] = nums[i-1]
            i -= 1
        nums[i] = key
    return nums
print(insertsort([1,4,6,2,7,3]))
print(insertsort([]))
print(insertsort([3]))

#冒泡排序
def bubblesort(nums):
    if not nums:
        return nums
    length = len(nums)
    for i in range(length):
        for j in range(1,length-i):
            if nums[j-1] > nums[j]:
                nums[j-1],nums[j] = nums[j], nums[j-1]
    return nums
print(bubblesort([1,4,6,2,7,3]))
print(bubblesort([]))
print(bubblesort([3]))

#短冒泡排序具有识别排序数组的优点，一旦数组已排好序，直接返回即可。
def short_bubblesort(nums):
    if not nums:
        return nums
    length = len(nums)-1
    sorted = True
    while length > 0 and sorted:
        sorted = False
        for j in range(length):
                if nums[j] > nums[j+1]:
                    sorted = True
                    nums[j ], nums[j+1] = nums[j+1], nums[j ]
        length -= 1
    return nums
print(short_bubblesort([1,4,6,2,7,3]))
print(short_bubblesort([3]))
print(short_bubblesort([1,2,3,4,5,6,7,8]))

#选择排序
def selectsort(nums):
    if not nums:
        return nums
    length = len(nums)
    for i in range(length):
        max = nums[0]
        for j in range(length-i):
            if nums[j] >= max:
                max = nums[j]
                position = j
        nums[position], nums[length-i-1] = nums[length-i-1], nums[position]
    return nums
print(selectsort([1,4,6,2,7,3]))
print(selectsort([]))
print(selectsort([3]))

class merge_sort():
    def merge(self, nums1, nums2):
        res = []
        i,j = 0, 0
        while i < len(nums1) and j < len(nums2):
            if nums1[i] < nums2[j]:
                res.append(nums1[i])
                i += 1
            else:
                res.append(nums2[j])
                j += 1
        if i < len(nums1):
            res.extend(nums1[i:])
        if j < len(nums2):
            res.extend(nums2[j:])
        return res

    def  mergesort(self, nums):
        if len(nums)==0:
            return
        if len(nums)==1:
            return nums
        mid = len(nums)//2
        left = nums[:mid]
        right = nums[mid:]
        l1 = self.mergesort(left)
        r1 = self.mergesort(right)
        return self.merge(l1,r1)
if __name__ =="__main__":
    s = merge_sort()
    test = [1, 7, 3, 11, 8, 9, 24, 2, 34, 4, 5, 6]
    res = s.mergesort(test)
    print(res)
