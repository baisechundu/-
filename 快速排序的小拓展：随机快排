#这次比较的对象是最后的元素，适当改动部分即可
class quick_sort():
    def splitpoint(self, nums, start, end):
        key = nums[end]
        leftmark = start
        rightmark = end - 1
        done = False
        while not done:
            while nums[leftmark] <= key and leftmark <= rightmark and leftmark < end:
                leftmark += 1
            while nums[rightmark] >= key and leftmark <= rightmark and rightmark > start:
               rightmark -= 1
            if leftmark >= rightmark:
                done = True
            else:
                nums[leftmark], nums[rightmark] = nums[rightmark], nums[leftmark]
        nums[end], nums[leftmark] = nums[leftmark], nums[end]
        return rightmark

    def quicksorthelper(self, nums, start, end):
        if start < end:
            split = self.splitpoint(nums, start, end)
            self.quicksorthelper(nums, start, split - 1)
            self.quicksorthelper(nums, split + 1, end)

    def quicksort(self, nums):
        self.quicksorthelper(nums, 0, len(nums) - 1)
        return nums
if __name__ == '__main__':
    s = quick_sort()
    print(s.quicksort([1, 4, 6, 2, 7, 3, 6, 3]))
    print(s.quicksort([13, 41, 62, 28, 72, 39, 64, 37]))

#随机快速排序法
import random
class quick_sort():
    def random_partition(self, nums, l, end):
        pivot = random.randint(l,end)
        key = nums[pivot]
        start = l
        r = end
        while start <= r:
            while start <= r and nums[start]<= key: #此处取等号是为了避免讨论情况，即左指针即便是移至分割点，也会跳过。
                    start += 1
            while start <= r and nums[r] >= key:
                    r -= 1
            if start < r:
                nums[start], nums[r] = nums[r], nums[start]
        nums[r],nums[pivot] = key, nums[r]
        return r
    def quick(self, nums, l, r):
        if l >= r:
            return
        mid = self.random_partition(nums, l, r)
        self.quick(nums, l, mid-1)
        self.quick(nums, mid+1, r)
        return nums
if __name__ == "__main__":
    s = quick_sort()
    nums = [1, 7, 3, 11, 8, 9, 24, 2, 34, 4, 5, 6]
    result = s.quick(nums, 0, len(nums)-1)
    print(result)
